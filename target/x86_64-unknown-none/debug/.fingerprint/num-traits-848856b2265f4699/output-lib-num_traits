{"$message_type":"diagnostic","message":"can't find crate for `std`","code":{"code":"E0463","explanation":"A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs","byte_start":806,"byte_end":823,"line_start":23,"line_end":23,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"extern crate std;","highlight_start":1,"highlight_end":18}],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the `x86_64-unknown-none` target may not support the standard library","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider building the standard library from source with `cargo build -Zbuild-std`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: can't find crate for `std`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern crate std;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't find crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the `x86_64-unknown-none` target may not support the standard library\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: consider building the standard library from source with `cargo build -Zbuild-std`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21752,"byte_end":21757,"line_start":837,"line_end":837,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::floor(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `floor` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52926,"line_start":10,"line_end":837,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52926,"line_start":10,"line_end":837,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:837:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `floor` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21787,"byte_end":21791,"line_start":838,"line_end":838,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        Self::ceil(self) -> Self;","highlight_start":15,"highlight_end":19}],"label":"multiple `ceil` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52961,"line_start":10,"line_end":838,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52961,"line_start":10,"line_end":838,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:838:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `ceil` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21821,"byte_end":21826,"line_start":839,"line_end":839,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::round(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `round` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52995,"line_start":10,"line_end":839,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":52995,"line_start":10,"line_end":839,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:839:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `round` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21856,"byte_end":21861,"line_start":840,"line_end":840,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::trunc(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `trunc` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53030,"line_start":10,"line_end":840,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53030,"line_start":10,"line_end":840,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:840:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m840\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::trunc(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `trunc` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21891,"byte_end":21896,"line_start":841,"line_end":841,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::fract(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `fract` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53065,"line_start":10,"line_end":841,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53065,"line_start":10,"line_end":841,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:841:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m841\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::fract(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `fract` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21995,"byte_end":21999,"line_start":844,"line_end":844,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":15,"highlight_end":19}],"label":"multiple `powi` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53169,"line_start":10,"line_end":844,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":53169,"line_start":10,"line_end":844,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:844:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   Self::powi(self, n: i32) \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `powi` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23585,"byte_end":23590,"line_start":899,"line_end":899,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::floor(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `floor` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54759,"line_start":10,"line_end":899,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54759,"line_start":10,"line_end":899,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:899:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `floor` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23620,"byte_end":23624,"line_start":900,"line_end":900,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        Self::ceil(self) -> Self;","highlight_start":15,"highlight_end":19}],"label":"multiple `ceil` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54794,"line_start":10,"line_end":900,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54794,"line_start":10,"line_end":900,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:900:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `ceil` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23654,"byte_end":23659,"line_start":901,"line_end":901,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::round(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `round` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54828,"line_start":10,"line_end":901,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54828,"line_start":10,"line_end":901,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:901:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `round` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23689,"byte_end":23694,"line_start":902,"line_end":902,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::trunc(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `trunc` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54863,"line_start":10,"line_end":902,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54863,"line_start":10,"line_end":902,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:902:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m902\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::trunc(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `trunc` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23724,"byte_end":23729,"line_start":903,"line_end":903,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"        Self::fract(self) -> Self;","highlight_start":15,"highlight_end":20}],"label":"multiple `fract` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54898,"line_start":10,"line_end":903,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":54898,"line_start":10,"line_end":903,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:903:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m903\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::fract(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `fract` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23828,"byte_end":23832,"line_start":906,"line_end":906,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":15,"highlight_end":19}],"label":"multiple `powi` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":55002,"line_start":10,"line_end":906,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":55002,"line_start":10,"line_end":906,"column_start":17,"column_end":15,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:906:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   Self::powi(self, n: i32) \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `powi` found\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51159,"byte_end":51164,"line_start":1948,"line_end":1948,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::floor(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `floor` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82333,"line_start":10,"line_end":1948,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82333,"line_start":10,"line_end":1948,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1948:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::floor(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `floor` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51202,"byte_end":51206,"line_start":1949,"line_end":1949,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                Self::ceil(self) -> Self;","highlight_start":23,"highlight_end":27}],"label":"multiple `ceil` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82376,"line_start":10,"line_end":1949,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82376,"line_start":10,"line_end":1949,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1949:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::ceil(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `ceil` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51244,"byte_end":51249,"line_start":1950,"line_end":1950,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::round(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `round` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82418,"line_start":10,"line_end":1950,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82418,"line_start":10,"line_end":1950,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1950:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::round(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `round` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51287,"byte_end":51292,"line_start":1951,"line_end":1951,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::trunc(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `trunc` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82461,"line_start":10,"line_end":1951,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82461,"line_start":10,"line_end":1951,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1951:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::trunc(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `trunc` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51330,"byte_end":51335,"line_start":1952,"line_end":1952,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::fract(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `fract` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82504,"line_start":10,"line_end":1952,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82504,"line_start":10,"line_end":1952,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1952:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1952\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::fract(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `fract` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51672,"byte_end":51676,"line_start":1959,"line_end":1959,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":23,"highlight_end":27}],"label":"multiple `powi` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":21727,"byte_end":22028,"line_start":836,"line_end":845,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82846,"line_start":10,"line_end":1959,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82846,"line_start":10,"line_end":1959,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55640,"byte_end":55679,"line_start":2078,"line_end":2078,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f32 integer_decode_f32);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1959:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::powi(self, n: i32) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `powi` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2078:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f32 integer_decode_f32);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:836:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m844\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m845\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51159,"byte_end":51164,"line_start":1948,"line_end":1948,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::floor(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `floor` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82333,"line_start":10,"line_end":1948,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82333,"line_start":10,"line_end":1948,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1948:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1948\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::floor(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `floor` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51202,"byte_end":51206,"line_start":1949,"line_end":1949,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                Self::ceil(self) -> Self;","highlight_start":23,"highlight_end":27}],"label":"multiple `ceil` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82376,"line_start":10,"line_end":1949,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82376,"line_start":10,"line_end":1949,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1949:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1949\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::ceil(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `ceil` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51244,"byte_end":51249,"line_start":1950,"line_end":1950,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::round(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `round` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82418,"line_start":10,"line_end":1950,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82418,"line_start":10,"line_end":1950,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1950:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1950\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::round(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `round` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51287,"byte_end":51292,"line_start":1951,"line_end":1951,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::trunc(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `trunc` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82461,"line_start":10,"line_end":1951,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82461,"line_start":10,"line_end":1951,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1951:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1951\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::trunc(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `trunc` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51330,"byte_end":51335,"line_start":1952,"line_end":1952,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"                Self::fract(self) -> Self;","highlight_start":23,"highlight_end":28}],"label":"multiple `fract` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82504,"line_start":10,"line_end":1952,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82504,"line_start":10,"line_end":1952,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1952:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1952\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::fract(self) -> Self;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `fract` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":51672,"byte_end":51676,"line_start":1959,"line_end":1959,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":23,"highlight_end":27}],"label":"multiple `powi` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":296,"byte_end":303,"line_start":9,"line_end":9,"column_start":16,"column_end":23,"is_primary":false,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":16,"highlight_end":23}],"label":"due to this macro variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Float` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":293,"byte_end":337,"line_start":9,"line_end":9,"column_start":13,"column_end":57,"is_primary":true,"text":[{"text":"            fn $method(self $( , $arg : $ty )* ) -> $ret {","highlight_start":13,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":23560,"byte_end":23861,"line_start":898,"line_end":907,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    forward! {","highlight_start":5,"highlight_end":15},{"text":"        Self::floor(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":34},{"text":"        Self::round(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::fract(self) -> Self;","highlight_start":1,"highlight_end":35},{"text":"        Self::abs(self) -> Self;","highlight_start":1,"highlight_end":33},{"text":"        Self::signum(self) -> Self;","highlight_start":1,"highlight_end":36},{"text":"        Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"use fully-qualified syntax to disambiguate","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82846,"line_start":10,"line_end":1959,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"Float::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":356,"byte_end":82846,"line_start":10,"line_end":1959,"column_start":17,"column_end":23,"is_primary":true,"text":[],"label":null,"suggested_replacement":"FloatCore::","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":50772,"byte_end":53127,"line_start":1940,"line_end":1991,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            forward! {","highlight_start":13,"highlight_end":23},{"text":"                Self::is_nan(self) -> bool;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_infinite(self) -> bool;","highlight_start":1,"highlight_end":49},{"text":"                Self::is_finite(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_normal(self) -> bool;","highlight_start":1,"highlight_end":47},{"text":"                Self::is_subnormal(self) -> bool;","highlight_start":1,"highlight_end":50},{"text":"                Self::classify(self) -> FpCategory;","highlight_start":1,"highlight_end":52},{"text":"                Self::clamp(self, min: Self, max: Self) -> Self;","highlight_start":1,"highlight_end":65},{"text":"                Self::floor(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::ceil(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::round(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::trunc(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::fract(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::abs(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::signum(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::is_sign_positive(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::is_sign_negative(self) -> bool;","highlight_start":1,"highlight_end":54},{"text":"                Self::mul_add(self, a: Self, b: Self) -> Self;","highlight_start":1,"highlight_end":63},{"text":"                Self::recip(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::powi(self, n: i32) -> Self;","highlight_start":1,"highlight_end":50},{"text":"                Self::powf(self, n: Self) -> Self;","highlight_start":1,"highlight_end":51},{"text":"                Self::sqrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::exp(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::exp2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::ln(self) -> Self;","highlight_start":1,"highlight_end":40},{"text":"                Self::log(self, base: Self) -> Self;","highlight_start":1,"highlight_end":53},{"text":"                Self::log2(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::log10(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::to_degrees(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::to_radians(self) -> Self;","highlight_start":1,"highlight_end":48},{"text":"                Self::max(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::min(self, other: Self) -> Self;","highlight_start":1,"highlight_end":54},{"text":"                Self::cbrt(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::hypot(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::cos(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::tan(self) -> Self;","highlight_start":1,"highlight_end":41},{"text":"                Self::asin(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::acos(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::atan2(self, other: Self) -> Self;","highlight_start":1,"highlight_end":56},{"text":"                Self::sin_cos(self) -> (Self, Self);","highlight_start":1,"highlight_end":53},{"text":"                Self::exp_m1(self) -> Self;","highlight_start":1,"highlight_end":44},{"text":"                Self::ln_1p(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::sinh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::cosh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::tanh(self) -> Self;","highlight_start":1,"highlight_end":42},{"text":"                Self::asinh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::acosh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::atanh(self) -> Self;","highlight_start":1,"highlight_end":43},{"text":"                Self::copysign(self, sign: Self) -> Self;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":55705,"byte_end":55744,"line_start":2080,"line_end":2080,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"float_impl_std!(f64 integer_decode_f64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"float_impl_std!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs","byte_start":49995,"byte_end":50022,"line_start":1915,"line_end":1915,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! float_impl_std {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"forward!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs","byte_start":137,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! forward {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: multiple applicable items in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:1959:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Self::powi(self, n: i32) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `powi` found\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m      fn $method(self $( , $\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdue to this macro variable\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Float` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:2080:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfloat_impl_std!(f64 integer_decode_f64);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `FloatCore` for the type `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\macros.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   fn $method(self $( , $arg : $ty )* ) -> $ret {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\float.rs:898:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m898\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward! {\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::floor(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::ceil(self) -> S\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m901\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::round(self) -> \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::powi(self, n: i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m907\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `float_impl_std` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2763,"byte_end":2768,"line_start":77,"line_end":77,"column_start":34,"column_end":39,"is_primary":false,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":34,"highlight_end":39}],"label":"expected `&f32`, found `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2770,"byte_end":2772,"line_start":77,"line_end":77,"column_start":41,"column_end":43,"is_primary":false,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":41,"highlight_end":43}],"label":"expected `&f32`, found `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2746,"byte_end":2762,"line_start":77,"line_end":77,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":834,"byte_end":838,"line_start":23,"line_end":23,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":840,"byte_end":841,"line_start":23,"line_end":23,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":26,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":822,"byte_end":832,"line_start":23,"line_end":23,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2763,"byte_end":2764,"line_start":77,"line_end":77,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2770,"byte_end":2771,"line_start":77,"line_end":77,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:77:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                <$t>::div_euclid(*self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f32`, found `f32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f32`, found `f32`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0meuclid_forward_impl!(f32 f64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:23:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn div_euclid(&self, v: &Self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `euclid_forward_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::div_euclid(\u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mself, *v)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::div_euclid(self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::div_euclid(*self, \u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mv)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::div_euclid(*self, v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2895,"byte_end":2900,"line_start":82,"line_end":82,"column_start":34,"column_end":39,"is_primary":false,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":34,"highlight_end":39}],"label":"expected `&f32`, found `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2902,"byte_end":2904,"line_start":82,"line_end":82,"column_start":41,"column_end":43,"is_primary":false,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":41,"highlight_end":43}],"label":"expected `&f32`, found `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2878,"byte_end":2894,"line_start":82,"line_end":82,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1875,"byte_end":1879,"line_start":48,"line_end":48,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1881,"byte_end":1882,"line_start":48,"line_end":48,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":26,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1863,"byte_end":1873,"line_start":48,"line_end":48,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2895,"byte_end":2896,"line_start":82,"line_end":82,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2902,"byte_end":2903,"line_start":82,"line_end":82,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:82:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f32`, found `f32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f32`, found `f32`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0meuclid_forward_impl!(f32 f64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:48:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn rem_euclid(&self, v: &Self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `euclid_forward_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::rem_euclid(\u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mself, *v)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::rem_euclid(self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, \u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mv)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2763,"byte_end":2768,"line_start":77,"line_end":77,"column_start":34,"column_end":39,"is_primary":false,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":34,"highlight_end":39}],"label":"expected `&f64`, found `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2770,"byte_end":2772,"line_start":77,"line_end":77,"column_start":41,"column_end":43,"is_primary":false,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":41,"highlight_end":43}],"label":"expected `&f64`, found `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2746,"byte_end":2762,"line_start":77,"line_end":77,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":834,"byte_end":838,"line_start":23,"line_end":23,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":840,"byte_end":841,"line_start":23,"line_end":23,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":26,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":822,"byte_end":832,"line_start":23,"line_end":23,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn div_euclid(&self, v: &Self) -> Self;","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2763,"byte_end":2764,"line_start":77,"line_end":77,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2770,"byte_end":2771,"line_start":77,"line_end":77,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"                <$t>::div_euclid(*self, *v)","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:77:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                <$t>::div_euclid(*self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f64`, found `f64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f64`, found `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0meuclid_forward_impl!(f32 f64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:23:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn div_euclid(&self, v: &Self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `euclid_forward_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::div_euclid(\u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mself, *v)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::div_euclid(self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::div_euclid(*self, \u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mv)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::div_euclid(*self, v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2895,"byte_end":2900,"line_start":82,"line_end":82,"column_start":34,"column_end":39,"is_primary":false,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":34,"highlight_end":39}],"label":"expected `&f64`, found `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2902,"byte_end":2904,"line_start":82,"line_end":82,"column_start":41,"column_end":43,"is_primary":false,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":41,"highlight_end":43}],"label":"expected `&f64`, found `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2878,"byte_end":2894,"line_start":82,"line_end":82,"column_start":17,"column_end":33,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":17,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1875,"byte_end":1879,"line_start":48,"line_end":48,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1881,"byte_end":1882,"line_start":48,"line_end":48,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":26,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":1863,"byte_end":1873,"line_start":48,"line_end":48,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn rem_euclid(&self, v: &Self) -> Self;","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2895,"byte_end":2896,"line_start":82,"line_end":82,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider removing deref here","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2902,"byte_end":2903,"line_start":82,"line_end":82,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"                <$t>::rem_euclid(*self, *v)","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":3064,"byte_end":3093,"line_start":92,"line_end":92,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"euclid_forward_impl!(f32 f64);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"euclid_forward_impl!","def_site_span":{"file_name":"C:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs","byte_start":2570,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! euclid_forward_impl {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:82:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f64`, found `f64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `&f64`, found `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0meuclid_forward_impl!(f32 f64);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\woisr\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\ops\\euclid.rs:48:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn rem_euclid(&self, v: &Self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `euclid_forward_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::rem_euclid(\u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mself, *v)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::rem_euclid(self, *v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing deref here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, \u001b[0m\u001b[0m\u001b[38;5;9m*\u001b[0m\u001b[0mv)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                <$t>::rem_euclid(*self, v)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 29 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 29 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0034, E0308, E0463.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0034, E0308, E0463.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0034`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0034`.\u001b[0m\n"}
